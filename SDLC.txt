Жизненный цикл программного обеспечения (ПО) – период времени, который начинается с момента принятия решения о необходимости создания программного продукта и заканчивается в момент его полного изъятия из эксплуатации.

1.Каскадная или водопадная модель (Waterfall model)
При такой модели каждая из фаз проекта проводится единожды, следуя одна за другой. Для того, чтобы начать следующую стадию, необходимо полное завершение предыдущей.

Плюсы:

*все стадии проекта выполняются в строгой последовательности;
*строгость этапов позволяет планировать сроки завершения всех работ и соответствующие ресурсы (денежные и человеческие);
*требования остаются неизменными в течение всего цикла.
Минусы:

*сложности при формулировке четких требований и невозможность их изменения;
*тестирование начинается только с середины развития проекта;
*до завершения процесса разработки пользователи не могут убедиться, качествен ли разрабатываемый продукт.
 
 
 2.V-образная модель (V-model)

Суть этой модели состоит в том, что процессы на всех этапах контролируются, чтобы убедиться в возможности перехода на следующий уровень. Уже на стадии написания требований начинается процесс тестирования.

Плюсы:

*строгая этапизация;
*минимизация рисков и устранение потенциальных проблем за счет того, что тестирование появляется на самых ранних стадиях;
*усовершенствованный тайм-менеджмент.
Минусы:

*невозможность адаптироваться к измененным требованиям заказчика;
*длительное время разработки (иногда длится до нескольких лет) приводит к тому, что продукт может быть уже не нужен заказчику, поскольку его потребности меняются;
*нет действий, направленных на анализ рисков.
 
 
 3.Инкрементная модель (Incremental model)
При инкрементной модели (англ. increment – увеличение, приращение) программное обеспечение разрабатывается с линейной последовательностью стадий, но в несколько инкрементов (версий). Таким образом улучшение продукта проходит запланированно все время, пока жизненный цикл разработки ПО не завершится.

Требования к системе определяются в самом начале работы, после чего процесс разработки проводится в виде последовательности версий, каждая из которых является законченным и работоспособным продуктом.

Плюсы:

*заказчик может дать свой отзыв касательно каждой версии продукта;
*есть возможность пересмотреть риски, которые связаны с затратами и соблюдением графика;
*привыкание заказчика к новой технологии происходит постепенно.
Минусы:

*функциональная система должна быть полностью определена в начале жизненного цикла для выделения итераций;
*при постоянных изменениях структура системы может быть нарушена;
*сроки сдачи системы могут быть затянуты из-за ограниченности ресурсов (исполнители, финансы).


4.Спиральная модель (Spiral model)
В спиральной модели жизненный путь разрабатываемого продукта изображается в виде спирали, которая, начавшись на этапе планирования, раскручивается с прохождением каждого следующего шага. Таким образом, на выходе из очередного витка получаем готовый протестированный прототип, который дополняет существующую сборку. Прототип, удовлетворяющий всем требованиям, готов к выпуску.

Плюсы:

*управлению рисками уделяется особое внимание;
*дополнительные функции могут быть добавлены на поздних этапах;
*есть возможность гибкого проектирования.
Минусы:

оценка рисков на каждом этапе является довольно затратной;
постоянные отзывы и реакция заказчика может провоцировать все новые и новые итерации, которые могут приводить к временному затягиванию разработки продукта;
более применима для больших проектов.


5.Гибкая модель (Agile model)
Представляет собой совокупность различных подходов к разработке ПО. Включает серии подходов к разработке программного обеспечения, ориентированных на использование итеративной разработки (в Scrum итерации называются спринтами), динамическое формирование требований и обеспечение их реализации в результате постоянного взаимодействия внутри самоорганизующихся рабочих групп, состоящих из специалистов различного профиля. Отдельная итерация представляет собой миниатюрный программный проект. Одной из основных идей Agile является взаимодействие внутри команды и с заказчиком лицом к лицу.

Плюсы:

*быстрое принятие решений за счет постоянных коммуникаций;
*минимизация рисков;
*облегченная работа с документацией.
Минусы:

*большое количество митингов и бесед, что может увеличить время разработки продукта;
*сложно планировать процессы, так как требования постоянно меняются;
*редко используется для реализации больших проектов.


5.1.Скрам (Scrum)
Скрам – это гибкая модель разработки ПО, в которой делается акцент на качественном контроле процесса разработки.

Роли в методологии (Scrum Master, Product Owner, Team) позволяют четко распределить обязанности в процессе разработки. За успех Scrum в проекте отвечает Scrum Master и является связующим звеном между менеджментом и командой. За разработку продукта отвечает Product Owner, который также ставит задачи и принимает окончательные решения для команды.

Команда – это единое целое, в ней результаты оцениваются не по каждому отдельному участнику, а по тому, что получается в итоге у всех.
Спринты в данной методологии длятся от 1 до 4 недель. После каждого спринта команда предоставляет вариант законченного продукта.

Плюсы:

*быстрая обратная связь от специалистов в разных сферах (дизайнеров, архитекторов, тестировщиков и пр.);
*благодаря вовлеченности тестировщика в работу происходит быстрое добавление нового функционала и быстрый запуск продукта с минимальными функциями;
*самостоятельная и самоорганизованная команда.
Минусы:

*некоторые люди, знающие продукт, становятся незаменимыми, так как документация не предоставляется в процессе разработки;
*невозможно спланировать точную дату завершения, так как всё уточняется по результатам предыдущего спринта;
*заказчики не всегда могут понять суть данной методологии и необходимо потратить время на “ликбез”.
 
 
 5.2.Канбан (Kanban)
 
 Канбан — это модель, которая помогает визуализировать и контролировать работу. Ее цель — наглядно отслеживать работу с помощью доски и карточек с задачами. Доска обычно делится на три основные колонки:
-to do («сделать»),
-in progress («в работе»),
-done («готово»).
Но может быть отображено и больше колонок в зависимости от потребностей конкретной команды (например, тестирование, деплой, проверка кода и т. д.). Карточки обычно перемещаются в соответствующую секцию в зависимости от прогресса.

Плюсы:

*В методе kanban не прописаны конкретные роли.
*В kanban-методе измеряется время цикла — среднее время, в течение которого продукт проходит все этапы (например, от To Do до Done).
*Kanban очень гибок к изменениям, которые могут быть сделаны в любое время
*Основная измеряемая единица — время цикла. На основе этого показателя можно сделать прогнозы относительно будущих релизов и скорости работы команды.
Минусы:

*Поскольку количество незавершенных задач в kanban ограничено, если какая-либо задача по какой-либо причине будет заблокирована, это может привести к блокировке исполнителей. Если несколько задач будут заблокированы, работа над проектом может быть остановлена, что может иметь негативные последствия. 